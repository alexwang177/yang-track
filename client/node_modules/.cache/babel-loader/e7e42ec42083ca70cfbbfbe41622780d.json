{"ast":null,"code":"var querystring = require('querystring'),\n    crypto = require('crypto'),\n    https = require('https'),\n    http = require('http'),\n    URL = require('url'),\n    OAuthUtils = require('./_utils');\n\nexports.OAuth2 = function (clientId, clientSecret, baseSite, authorizePath, accessTokenPath, customHeaders) {\n  this._clientId = clientId;\n  this._clientSecret = clientSecret;\n  this._baseSite = baseSite;\n  this._authorizeUrl = authorizePath || \"/oauth/authorize\";\n  this._accessTokenUrl = accessTokenPath || \"/oauth/access_token\";\n  this._accessTokenName = \"access_token\";\n  this._authMethod = \"Bearer\";\n  this._customHeaders = customHeaders || {};\n  this._useAuthorizationHeaderForGET = false; //our agent\n\n  this._agent = undefined;\n}; // Allows you to set an agent to use instead of the default HTTP or\n// HTTPS agents. Useful when dealing with your own certificates.\n\n\nexports.OAuth2.prototype.setAgent = function (agent) {\n  this._agent = agent;\n}; // This 'hack' method is required for sites that don't use\n// 'access_token' as the name of the access token (for requests).\n// ( http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-7 )\n// it isn't clear what the correct value should be atm, so allowing\n// for specific (temporary?) override for now.\n\n\nexports.OAuth2.prototype.setAccessTokenName = function (name) {\n  this._accessTokenName = name;\n}; // Sets the authorization method for Authorization header.\n// e.g. Authorization: Bearer <token>  # \"Bearer\" is the authorization method.\n\n\nexports.OAuth2.prototype.setAuthMethod = function (authMethod) {\n  this._authMethod = authMethod;\n}; // If you use the OAuth2 exposed 'get' method (and don't construct your own _request call )\n// this will specify whether to use an 'Authorize' header instead of passing the access_token as a query parameter\n\n\nexports.OAuth2.prototype.useAuthorizationHeaderforGET = function (useIt) {\n  this._useAuthorizationHeaderForGET = useIt;\n};\n\nexports.OAuth2.prototype._getAccessTokenUrl = function () {\n  return this._baseSite + this._accessTokenUrl;\n  /* + \"?\" + querystring.stringify(params); */\n}; // Build the authorization header. In particular, build the part after the colon.\n// e.g. Authorization: Bearer <token>  # Build \"Bearer <token>\"\n\n\nexports.OAuth2.prototype.buildAuthHeader = function (token) {\n  return this._authMethod + ' ' + token;\n};\n\nexports.OAuth2.prototype._chooseHttpLibrary = function (parsedUrl) {\n  var http_library = https; // As this is OAUth2, we *assume* https unless told explicitly otherwise.\n\n  if (parsedUrl.protocol != \"https:\") {\n    http_library = http;\n  }\n\n  return http_library;\n};\n\nexports.OAuth2.prototype._request = function (method, url, headers, post_body, access_token, callback) {\n  var parsedUrl = URL.parse(url, true);\n\n  if (parsedUrl.protocol == \"https:\" && !parsedUrl.port) {\n    parsedUrl.port = 443;\n  }\n\n  var http_library = this._chooseHttpLibrary(parsedUrl);\n\n  var realHeaders = {};\n\n  for (var key in this._customHeaders) {\n    realHeaders[key] = this._customHeaders[key];\n  }\n\n  if (headers) {\n    for (var key in headers) {\n      realHeaders[key] = headers[key];\n    }\n  }\n\n  realHeaders['Host'] = parsedUrl.host;\n\n  if (!realHeaders['User-Agent']) {\n    realHeaders['User-Agent'] = 'Node-oauth';\n  }\n\n  if (post_body) {\n    if (Buffer.isBuffer(post_body)) {\n      realHeaders[\"Content-Length\"] = post_body.length;\n    } else {\n      realHeaders[\"Content-Length\"] = Buffer.byteLength(post_body);\n    }\n  } else {\n    realHeaders[\"Content-length\"] = 0;\n  }\n\n  if (access_token && !('Authorization' in realHeaders)) {\n    if (!parsedUrl.query) parsedUrl.query = {};\n    parsedUrl.query[this._accessTokenName] = access_token;\n  }\n\n  var queryStr = querystring.stringify(parsedUrl.query);\n  if (queryStr) queryStr = \"?\" + queryStr;\n  var options = {\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname + queryStr,\n    method: method,\n    headers: realHeaders\n  };\n\n  this._executeRequest(http_library, options, post_body, callback);\n};\n\nexports.OAuth2.prototype._executeRequest = function (http_library, options, post_body, callback) {\n  // Some hosts *cough* google appear to close the connection early / send no content-length header\n  // allow this behaviour.\n  var allowEarlyClose = OAuthUtils.isAnEarlyCloseHost(options.host);\n  var callbackCalled = false;\n\n  function passBackControl(response, result) {\n    if (!callbackCalled) {\n      callbackCalled = true;\n\n      if (!(response.statusCode >= 200 && response.statusCode <= 299) && response.statusCode != 301 && response.statusCode != 302) {\n        callback({\n          statusCode: response.statusCode,\n          data: result\n        });\n      } else {\n        callback(null, result, response);\n      }\n    }\n  }\n\n  var result = \"\"; //set the agent on the request options\n\n  if (this._agent) {\n    options.agent = this._agent;\n  }\n\n  var request = http_library.request(options);\n  request.on('response', function (response) {\n    response.on(\"data\", function (chunk) {\n      result += chunk;\n    });\n    response.on(\"close\", function (err) {\n      if (allowEarlyClose) {\n        passBackControl(response, result);\n      }\n    });\n    response.addListener(\"end\", function () {\n      passBackControl(response, result);\n    });\n  });\n  request.on('error', function (e) {\n    callbackCalled = true;\n    callback(e);\n  });\n\n  if ((options.method == 'POST' || options.method == 'PUT') && post_body) {\n    request.write(post_body);\n  }\n\n  request.end();\n};\n\nexports.OAuth2.prototype.getAuthorizeUrl = function (params) {\n  var params = params || {};\n  params['client_id'] = this._clientId;\n  return this._baseSite + this._authorizeUrl + \"?\" + querystring.stringify(params);\n};\n\nexports.OAuth2.prototype.getOAuthAccessToken = function (code, params, callback) {\n  var params = params || {};\n  params['client_id'] = this._clientId;\n  params['client_secret'] = this._clientSecret;\n  var codeParam = params.grant_type === 'refresh_token' ? 'refresh_token' : 'code';\n  params[codeParam] = code;\n  var post_data = querystring.stringify(params);\n  var post_headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n\n  this._request(\"POST\", this._getAccessTokenUrl(), post_headers, post_data, null, function (error, data, response) {\n    if (error) callback(error);else {\n      var results;\n\n      try {\n        // As of http://tools.ietf.org/html/draft-ietf-oauth-v2-07\n        // responses should be in JSON\n        results = JSON.parse(data);\n      } catch (e) {\n        // .... However both Facebook + Github currently use rev05 of the spec\n        // and neither seem to specify a content-type correctly in their response headers :(\n        // clients of these services will suffer a *minor* performance cost of the exception\n        // being thrown\n        results = querystring.parse(data);\n      }\n\n      var access_token = results[\"access_token\"];\n      var refresh_token = results[\"refresh_token\"];\n      delete results[\"refresh_token\"];\n      callback(null, access_token, refresh_token, results); // callback results =-=\n    }\n  });\n}; // Deprecated\n\n\nexports.OAuth2.prototype.getProtectedResource = function (url, access_token, callback) {\n  this._request(\"GET\", url, {}, \"\", access_token, callback);\n};\n\nexports.OAuth2.prototype.get = function (url, access_token, callback) {\n  if (this._useAuthorizationHeaderForGET) {\n    var headers = {\n      'Authorization': this.buildAuthHeader(access_token)\n    };\n    access_token = null;\n  } else {\n    headers = {};\n  }\n\n  this._request(\"GET\", url, headers, \"\", access_token, callback);\n};","map":null,"metadata":{},"sourceType":"script"}