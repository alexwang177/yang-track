{"ast":null,"code":"var _jsxFileName = \"/Users/AlexWang1/Desktop/YangTrack/yang-track/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport WordForm from './components/WordForm';\nimport Tweets from './components/Tweets';\nimport CanvasJSReact from './canvasjs.react';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateQuery = keyword => {\n      this.setState({\n        queryPhrase: keyword\n      });\n    };\n\n    this.searchTweets = e => {\n      e.preventDefault();\n      this.getTweets();\n    };\n\n    this.getTweets = () => {\n      console.log('Query: ' + this.state.queryPhrase);\n      fetch(\"/api/twitter\", {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'cache-control': 'no-cache'\n        },\n        body: JSON.stringify({\n          query: this.state.queryPhrase\n        })\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          apiResponse: data.payLoad\n        });\n        console.log(this.state.apiResponse);\n      }).catch(err => console.log(err));\n    };\n\n    this.averageSentiment = dataSet => {\n      let sp = 0;\n      let p = 0;\n      let neutral = 0;\n      let n = 0;\n      let sn = 0;\n      dataSet.forEach(tweet => {\n        if (tweet.sentiment.score > 2) sp++;else if (tweet.sentiment.score == 1 || tweet.sentiment.score == 2) p++;else if (tweet.sentiment.score == 0) neutral++;else if (tweet.sentiment.score == -1 || tweet.sentiment.score == -2) n++;else if (tweet.sentiment.score < -2) sn++;\n      });\n      let sum = 1;\n      sum = sp + p + neutral + n + sn;\n      if (isNaN(sum)) return [];\n      return [sp / sum, p / sum, neutral / sum, n / sum, sn / sum]; //return [sp, p, neutral, n, sn];\n    };\n\n    this.state = {\n      apiResponse: [],\n      queryPhrase: \"\"\n    };\n  }\n\n  render() {\n    let arrSentiments = this.averageSentiment(this.state.apiResponse);\n    console.log(arrSentiments);\n    const options = {\n      title: {\n        text: \"Yang Sentiment For Keyword: \" + this.state.queryPhrase\n      },\n      data: [{\n        type: \"pie\",\n        dataPoints: [{\n          label: \"Strongly Positive\",\n          y: arrSentiments[0]\n        }, {\n          label: \"Positive\",\n          y: arrSentiments[1]\n        }, {\n          label: \"Neutral\",\n          y: arrSentiments[2]\n        }, {\n          label: \"Negative\",\n          y: arrSentiments[3]\n        }, {\n          label: \"Strongly Negative\",\n          y: arrSentiments[4]\n        }]\n      }]\n    };\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(WordForm, {\n      searchTweets: this.searchTweets,\n      updateQuery: this.updateQuery,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(CanvasJSChart, {\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Tweets, {\n      apiResponse: this.state.apiResponse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/AlexWang1/Desktop/YangTrack/yang-track/client/src/App.js"],"names":["React","Component","Title","WordForm","Tweets","CanvasJSReact","CanvasJSChart","App","constructor","props","updateQuery","keyword","setState","queryPhrase","searchTweets","e","preventDefault","getTweets","console","log","state","fetch","method","headers","body","JSON","stringify","query","then","res","json","data","apiResponse","payLoad","catch","err","averageSentiment","dataSet","sp","p","neutral","n","sn","forEach","tweet","sentiment","score","sum","isNaN","render","arrSentiments","options","title","text","type","dataPoints","label","y"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css';\nimport Title from './components/Title';\nimport WordForm from './components/WordForm';\nimport Tweets from './components/Tweets';\nimport CanvasJSReact from './canvasjs.react';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = { \n      apiResponse: [],\n      queryPhrase: \"\"\n    };\n  }\n\n  updateQuery = (keyword) => {\n    this.setState({queryPhrase: keyword});\n  }\n\n  searchTweets = (e) => {\n    e.preventDefault();\n    this.getTweets();\n  }\n\n  getTweets = () => {\n\n    console.log('Query: ' + this.state.queryPhrase);\n\n    fetch(\"/api/twitter\", {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'cache-control': 'no-cache'\n      },\n      body: JSON.stringify({\n        query: this.state.queryPhrase\n      })\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setState({ apiResponse: data.payLoad})\n      console.log(this.state.apiResponse);\n    })\n    .catch(err => console.log(err));\n  }\n\n  averageSentiment = (dataSet) => {\n    let sp = 0;\n    let p = 0;\n    let neutral = 0;\n    let n = 0;\n    let sn = 0;\n\n    dataSet.forEach((tweet) => {\n      if(tweet.sentiment.score > 2)\n        sp++;\n      else if(tweet.sentiment.score == 1 || tweet.sentiment.score == 2)\n        p++;\n      else if(tweet.sentiment.score == 0)\n        neutral++;\n      else if(tweet.sentiment.score == -1 || tweet.sentiment.score == -2)\n        n++;\n      else if(tweet.sentiment.score < -2)\n        sn++;\n    })\n\n    let sum = 1;\n    sum = sp + p + neutral + n + sn;\n\n    if(isNaN(sum))\n      return [];\n    \n    return [sp/sum, p/sum, neutral/sum, n/sum ,sn/sum];\n    //return [sp, p, neutral, n, sn];\n  }\n\n  render(){\n    let arrSentiments = this.averageSentiment(this.state.apiResponse)\n\n    console.log(arrSentiments);\n  \n    const options = {\n      title: {\n        text: \"Yang Sentiment For Keyword: \" + this.state.queryPhrase\n      },\n      data: [{\t\t\t\t\n                type: \"pie\",\n                dataPoints: [\n                    { label: \"Strongly Positive\",  y: arrSentiments[0]  },\n                    { label: \"Positive\", y: arrSentiments[1]  },\n                    { label: \"Neutral\", y: arrSentiments[2]  },\n                    { label: \"Negative\",  y: arrSentiments[3]  },\n                    { label: \"Strongly Negative\",  y: arrSentiments[4]  }\n                ]\n       }]\n    }\n\n    return (\n      <div className=\"App\">\n        <Title></Title>\n        <WordForm searchTweets={this.searchTweets} updateQuery={this.updateQuery}></WordForm>\n        <CanvasJSChart options = {options}/>\n        <Tweets apiResponse={this.state.apiResponse}></Tweets>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}